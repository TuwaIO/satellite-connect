/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const SOLANATEST_DISCRIMINATOR = new Uint8Array([
  188, 63, 12, 105, 104, 194, 130, 9,
]);

export function getSolanatestDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(SOLANATEST_DISCRIMINATOR);
}

export type Solanatest = { discriminator: ReadonlyUint8Array; count: number };

export type SolanatestArgs = { count: number };

export function getSolanatestEncoder(): FixedSizeEncoder<SolanatestArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['count', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SOLANATEST_DISCRIMINATOR })
  );
}

export function getSolanatestDecoder(): FixedSizeDecoder<Solanatest> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['count', getU8Decoder()],
  ]);
}

export function getSolanatestCodec(): FixedSizeCodec<
  SolanatestArgs,
  Solanatest
> {
  return combineCodec(getSolanatestEncoder(), getSolanatestDecoder());
}

export function decodeSolanatest<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Solanatest, TAddress>;
export function decodeSolanatest<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Solanatest, TAddress>;
export function decodeSolanatest<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Solanatest, TAddress> | MaybeAccount<Solanatest, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getSolanatestDecoder()
  );
}

export async function fetchSolanatest<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Solanatest, TAddress>> {
  const maybeAccount = await fetchMaybeSolanatest(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeSolanatest<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Solanatest, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeSolanatest(maybeAccount);
}

export async function fetchAllSolanatest(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Solanatest>[]> {
  const maybeAccounts = await fetchAllMaybeSolanatest(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeSolanatest(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Solanatest>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeSolanatest(maybeAccount));
}

export function getSolanatestSize(): number {
  return 9;
}
