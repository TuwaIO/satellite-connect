/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from 'gill';
import { SOLANATEST_PROGRAM_ADDRESS } from '../programs';

/** Overflow: Cannot increment count because it would overflow. */
export const SOLANATEST_ERROR__OVERFLOW = 0x1770; // 6000
/** Underflow: Cannot decrement count because it would underflow. */
export const SOLANATEST_ERROR__UNDERFLOW = 0x1771; // 6001

export type SolanatestError =
  | typeof SOLANATEST_ERROR__OVERFLOW
  | typeof SOLANATEST_ERROR__UNDERFLOW;

let solanatestErrorMessages: Record<SolanatestError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  solanatestErrorMessages = {
    [SOLANATEST_ERROR__OVERFLOW]: `Cannot increment count because it would overflow.`,
    [SOLANATEST_ERROR__UNDERFLOW]: `Cannot decrement count because it would underflow.`,
  };
}

export function getSolanatestErrorMessage(code: SolanatestError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (solanatestErrorMessages as Record<SolanatestError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isSolanatestError<TProgramErrorCode extends SolanatestError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    SOLANATEST_PROGRAM_ADDRESS,
    code
  );
}
